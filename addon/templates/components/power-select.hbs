{{#basic-dropdown
    class=(readonly concatenatedClasses)
    dir=(readonly dir)
    tabindex=(readonly tabindex)
    role="combobox"
    renderInPlace=(readonly renderInPlace)
    matchTriggerWidth=true
    disabled=(readonly disabled)
    verticalPosition=(readonly verticalPosition)
    triggerClass=(readonly concatenatedTriggerClasses)
    dropdownClass=(readonly concatenatedDropdownClasses)
    opened=opened
    onOpen=(action "handleOpen")
    onClose=(action "handleClose")
    onFocus=(action "handleFocus")
    onKeydown=(action "handleKeydown")
    registerActionsInParent=(action "registerDropdown")
    ariaLabelledBy=ariaLabelledBy
    ariaDescribedBy=ariaDescribedBy
    ariaRequired=ariaRequired
    ariaInvalid=ariaInvalid
    as |dropdown|}}
  {{#with (hash
    isOpen=dropdown.isOpen
    actions=(hash
      open=dropdown.actions.open
      close=dropdown.actions.close
      reposition=dropdown.actions.reposition
      choose=(action "choose" dropdown)
      select=(action "select" dropdown)
      highlight=(action "highlight" dropdown)
      search=(action "search" dropdown)
      handleKeydown=(action "handleKeydown" dropdown)
    )) as |select|}}
      {{component beforeOptionsComponent searchText=(readonly searchText) onkeydown=(readonly onkeydown) select=(readonly select) searchPlaceholder=(readonly searchPlaceholder) searchEnabled=(readonly searchEnabled) highlighted=(readonly highlighted)}}
      {{#if mustShowSearchMessage}}
        <ul class="ember-power-select-options" role="listbox"><li class="ember-power-select-option" role="option">{{searchMessage}}</li></ul>
      {{else if mustShowNoMessages}}
        {{#if (hasBlock "inverse")}}
          {{yield to="inverse"}}
        {{else if noMatchesMessage}}
          <ul class="ember-power-select-options" role="listbox"><li class="ember-power-select-option" role="option">{{noMatchesMessage}}</li></ul>
        {{/if}}
      {{else}}
        {{#component optionsComponent options=(readonly results) loading=(readonly loading) allOptions=(readonly results) highlighted=(readonly highlighted)
          selected=(readonly selected) optionsComponent=(readonly optionsComponent) searchText=(readonly searchText) lastSearchedText=(readonly lastSearchedText)
          select=(readonly select) extra=(readonly extra) loadingMessage=(readonly loadingMessage)
          class="ember-power-select-options" as |option term|}}
          {{yield option term}}
        {{/component}}
      {{/if}}
      {{component afterOptionsComponent select=(readonly select) searchPlaceholder=(readonly searchPlaceholder) searchEnabled=(readonly searchEnabled)}}
  {{/with}}
{{else}}
  {{#with (hash
    isOpen=registeredDropdown.isOpen
    actions=(hash
      open=registeredDropdown.actions.open
      close=registeredDropdown.actions.close
      reposition=registeredDropdown.actions.reposition
      choose=(action "choose" registeredDropdown)
      select=(action "select" registeredDropdown)
      highlight=(action "highlight" registeredDropdown)
      search=(action "search" registeredDropdown)
      handleKeydown=(action "handleKeydown" registeredDropdown)
    )) as |select|}}
    {{#component triggerComponent options=(readonly results) selected=(readonly selected) searchText=(readonly searchText) lastSearchedText=(readonly lastSearchedText)
      placeholder=(readonly placeholder) disabled=(readonly disabled) highlighted=(readonly highlighted) allowClear=(readonly allowClear)
      select=(readonly select) extra=(readonly extra) onkeydown=(readonly onkeydown)
      selectedItemComponent=(readonly selectedItemComponent) searchField=(readonly searchField) as |opt term|}}
      {{yield opt term}}
    {{/component}}
  {{/with}}
{{/basic-dropdown}}