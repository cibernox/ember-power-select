<h1 class="doc-page-title">The list</h1>

<p>
  If there's a key area of the component that must be absolutely customizable, it's the dropdown with the list. This is probably the most dense chapter so far so we recommend that you read it cover to cover.
</p>

<h3>Position and destination</h3>

<p>
  The dropdown in Ember Power Select is pretty smart. By default this component inserts the dropdown
  not next the the trigger but in the a placeholder element in the root of your app (typically the <code>&lt;body&gt;</code>) using
  the awesome <a href="https://github.com/yapplabs/ember-wormhole">ember-wormhole</a> addon and then
  absolutely positions it.
</p>

<p>
  This is a safe default because by default it won't be affected by the overflow constraints of
  the element where the component lives in. However, there are a few situations where this is not
  practical, so you can tune this in two different ways.
</p>

<p>
  You can configure Ember Basic Dropdown (the addon used internally by EPS) to use a different element
  as destination for the dropdown. By default an <code>&lt;div id="ember-basic-dropdown-wormhole"&gt;&lt;/div&gt;</code> div
  is added to the root of your app and used as destination, but you can specify a different one globally:
</p>

<pre>
  // config/environment.js

  ENV['ember-basic-dropdown'] = {
    destination: '&lt;id-of-destination-element&gt;'
  }
</pre>

<p>If you customize the destination element, then it is up to you to add that element somewhere in your app.</p>

<p>
  You can also specify a destination div on a per component basis, using the <code>destination</code> property.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select
      options=names
      destination="customized-destination"
      selected=name123
      onchange=(action (mut name123))
      as |name|
    }}
      \{{name}}
    \{{/power-select}}
    &lt;div id="customized-destination"&gt;&lt;/div&gt;
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      names: ['Stefan', 'Miguel', 'Tomster', 'Pluto'],
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=names
      destination="customized-destination"
      selected=name123
      onchange=(action (mut name123))
      as |name|
    }}
      {{name}}
    {{/power-select}}
    <div id="customized-destination"></div>
    (Looks the same but inspect the DOM to see the difference)
  </div>
{{/code-sample}}

<p>
  The second option is to opt-out to render the dropdown in a different place. Just pass <code>renderInPlace=true</code>
  and the dropdown will be placed next to the trigger element in the DOM.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select
      options=names
      renderInPlace=true
      selected=name
      onchange=(action (mut name))
      as |name|
    }}
      \{{name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      names: ['Stefan', 'Miguel', 'Tomster', 'Pluto'],
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=names
      renderInPlace=true
      selected=name
      onchange=(action (mut name))
      as |name|
    }}
      {{name}}
    {{/power-select}}
    (Looks the same but inspect the DOM to see the difference)
  </div>
{{/code-sample}}

<p>
  When the component is not rendered in place the dropdown can be configured to be added below
  or above the trigger using the <code>verticalPosition</code> option. The possible values
  are <code>below</code>, <code>above</code> and <code>auto</code> (the default).
</p>
<p>
  The <code>auto</code>
  mode will detect the best strategy based on the available space around the component and also
  will take care of repositioning it when you scroll or change the orientation of the device so you
  will rarely need to worry about this option.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select
      options=names
      verticalPosition='above'
      selected=name
      onchange=(action (mut name))
      as |name|
    }}
      \{{name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      names: ['Stefan', 'Miguel', 'Tomster', 'Pluto'],
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=names
      verticalPosition='above'
      selected=name
      onchange=(action (mut name))
      as |name|
    }}
      {{name}}
    {{/power-select}}
    (This list of options will always be on top regardless of how much available space there is around)
  </div>
{{/code-sample}}

<h3>The empty state</h3>

<p>
  What happens when the collection you pass to the component is empty?
  By default the component will render a helpful message. This message is the same
  that will appear after performing a search when there are no matching results.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select
      options=emptyList
      selected=selected
      onchange=(action (mut selected))
      as |name|
    }}
      \{{name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      emptyList: []
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=emptyList
      selected=selected
      onchange=(action (mut selected))
      as |name|
    }}
      {{name}}
    {{/power-select}}
  </div>
{{/code-sample}}

<p>
  You can pass a different message using <code>noMatchesMessage="My message"</code>
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select
      options=emptyList
      noMatchesMessage="404 bro"
      selected=selected
      onchange=(action (mut selected))
      as |name|
    }}
      \{{name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      emptyList: []
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=emptyList
      noMatchesMessage="404 bro"
      selected=selected
      onchange=(action (mut selected))
      as |name|
    }}
      {{name}}
    {{/power-select}}
  </div>
{{/code-sample}}

<p>
  Or you can just use the <code>\{{else}}</code> block to just customize a totally
  different HTML content just like the <code>\{{each}}</code> helper.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select
      options=emptyList
      selected=selected
      onchange=(action (mut selected))
      as |name|
    }}
      \{{name}}
    \{{else}}
      &lt;div class="text-center"&gt;
        &lt;img width="150" src="/grumpy-cat.png"&gt;
      &lt;/div&gt;
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      emptyList: []
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=emptyList
      selected=selected
      onchange=(action (mut selected))
      as |name|
    }}
      {{name}}
    {{else}}
      <div class="text-center">
        <img width="150" src="/grumpy-cat.png">
      </div>
    {{/power-select}}
  </div>
{{/code-sample}}

<h3>The loading state</h3>

<p>
  In the first chapter we mentioned that the options of this component can be any collection,
  including Ember-data collections resulting from <code>store.find</code>, <code>store.query</code>,
  asynchronous relationships and just plain old promises that resolve to a collection of
  some sort.
</p>
<p>
  That means that while the promise doesn't resolve you are in some kind of <em>loading</em>
  state where you don't have options yet (but you will have results) so you don't want to show the "No results" messages.
</p>

<p>
  The component will show a default message but you can also customize passing <code>loadingMessage="Some text"</code>
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    &lt;button onclick=\{{action "refreshCollection"}}&gt;Refresh collection&lt;/button&gt;

    Default loading message
    \{{#power-select
      options=promise
      selected=selected
      onchange=(action (mut selected))
      as |name|
    }}
      \{{name}}
    \{{/power-select}}

    Custom loading message
    \{{#power-select
      options=promise
      loadingMessage="Waiting for the server"
      selected=selected
      onchange=(action (mut selected))
      as |name|
    }}
      \{{name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    function generatePromise() {
      return new Ember.RSVP.Promise((resolve) => {
        setTimeout(() => resolve(['one', 'two', 'three']), 5000);
      });
    }

    export default Ember.Controller.extend({
      promise: null,
      actions: {
        refreshCollection() {
          this.set('promise', generatePromise());
        }
      }
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    <button onclick={{action "refreshCollection"}}>Refresh collection</button>
    <br>
    Default loading message
    {{#power-select
      options=promise
      selected=selected
      onchange=(action (mut selected))
      as |name|
    }}
      {{name}}
    {{/power-select}}
    <br>
    Custom loading message (press the <code>Refresh Collection</code> button and open this select)
    {{#power-select
      options=promise
      loadingMessage="Waiting for the server...."
      selected=selected
      onchange=(action (mut selected))
      as |name|
    }}
      {{name}}
    {{/power-select}}
  </div>
{{/code-sample}}

<h3>Disabling specific options or groups</h3>

<p>
  In {{#link-to 'public-pages.docs.the-trigger'}}the trigger{{/link-to}} we saw how to disable the entire component,
  but you can also disable specific options. Options that have a <code>disabled</code> property set to true
  will automatically be considered disabled and styled as such.
</p>

<p>
  Note that those disabled items, although displayed in the list, do not react to mouse events nor
  can be highlighted using arrow navigation.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-
      select options=countries
      selected=country
      searchField='name'
      onchange=(action (mut country))
      as |country|
    }}
      \{{country.name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      countries: [
        { name: 'United States',  code: 'US' },
        { name: 'Spain',          code: 'ES' },
        { name: 'Portugal',       code: 'PT', disabled: true },
        { name: 'Russia',         code: 'RU', disabled: true },
        { name: 'Latvia',         code: 'LV' },
        { name: 'Brazil',         code: 'BR', disabled: true },
        { name: 'United Kingdom', code: 'GB' },
      ]
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=countries
      selected=country
      searchField='name'
      onchange=(action (mut country))
      as |country|
    }}
      {{country.name}}
    {{/power-select}}
  </div>
{{/code-sample}}

<p>
  This also works with groups. If a group has a property <code>disabled: true</code>, all options inside
  that group, including nested groups are considered disabled, without having to mark every option as disabled.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select
      options=groupedNumbers
      selected=number
      onchange=(action (mut number))
      as |num|
    }}
      \{{num}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      groupedNumbers: [
        { groupName: "Smalls", disabled: true, options: ["one", "two", "three"] },
        { groupName: "Mediums", options: ["four", "five", "six"] },
        { groupName: "Bigs", disabled: true, options: [
            { groupName: "Fairly big", options: ["seven", "eight", "nine"] },
            { groupName: "Really big", options: [ "ten", "eleven", "twelve" ] },
            "thirteen"
          ]
        },
        "one hundred",
        "one thousand"
      ]
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=groupedNumbers
      selected=number
      onchange=(action (mut number))
      as |num|
    }}
      {{num}}
    {{/power-select}}
  </div>
{{/code-sample}}

<p>
  You might have noticed that there is a part of the dropdown that wasn't mentioned in this chapter: The search.
  This is because it deserves an entire chapter of its own.
</p>

<div class="doc-page-nav">
  {{#link-to 'public-pages.docs.the-trigger' class="doc-page-nav-link-prev"}}&lt; The trigger{{/link-to}}
  {{#link-to 'public-pages.docs.the-search' class="doc-page-nav-link-next"}}The search &gt;{{/link-to}}
</div>
