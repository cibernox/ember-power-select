<h1 class="doc-page-title">Custom search action</h1>

<p>
  In <LinkTo @route="public-pages.docs.the-search">The search</LinkTo> chapter we saw all the possible ways of
  personalizing the way the component can filter but they all had something in common. You had all the
  options available upon initialization and you were just filtering that collection.
</p>

<p>
  There are occasions when having all the options available upfront on the client side is not
  convenient or is downright impossible.
</p>

<p>
  When that's the case you can provide a <code>search</code> action instead of <code>options</code>
  (it's the only situation where the <code>options</code> are not mandatory) that will be invoked with
  the search term whenever the user types on the search box.
</p>

<p>
  Using that option you have complete freedom about how you search. Synchronous, asynchronous, with
  debouncing, using generators, you name it. It's entirely up you you.
  <br>
  There is only three things to know about this action:
  <ul>
    <li>You should return a collection or a promise that resolves to a collection from this action.</li>
    <li>
      You can provide both <code>options</code> and a <code>search</code> action. Those options will be
      the initial set of options, but as soon as the user performs a search, the results of that search
      will be displayed instead.
    </li>
    <li>
      This action <strong>will not be fired</strong> when the search term is blank. It will display the elements
      inside the <code>options</code> instead.
    </li>
  </ul>
</p>

<CodeExample @hbs="custom-search-action-1.hbs" @js="custom-search-action-1-js.js" as |partialName|>
  {{partial partialName}}
</CodeExample>

<h3>Handling of thenables and cancellables (p.e. ember-concurrecy)</h3>

<p>
  It's also worth mentioning that Ember Power Select is smart enough to always prioritize the last request made,
  so in the best scenario avoids expensive repaintings, and in the worst case (when the second request
  resolves before the first), when the first resolves it doesn't override the most recent request.
</p>

<p>
  Also, if the returned <em>thenable</em> is also a <em>cancellable</em> (it responds to a <code>.cancel()</code> method),
  Ember Power Select will attempt to cancel once it isn't interested anymore in it's result. By example, using ember-concurrency's
  tasks, if you close the component while a search task is still being processed, it gets cancelled saving a potentially
  expensive operation that would be ignored anyway.
</p>

<p>
  Open your dev tools and go to the network tab. I'll wait.
</p>

<p>
  In this example below, if you keep typing, no search is fired until after 1500ms of idle time have elapsed.
  And if before those 1500ms you clear the search or close the select, <strong>no request is made at all!</strong>
</p>

<CodeExample @hbs="custom-search-action-2.hbs" @js="custom-search-action-2-js.js" as |partialName|>
  {{partial partialName}}
</CodeExample>

<p>
  Cool, eh? Now let's see how you can use all of this in testing.
</p>


<div class="doc-page-nav">
  <LinkTo @route="public-pages.docs.styles" class="doc-page-nav-link-prev">&lt; Styles</LinkTo>
  <LinkTo @route="public-pages.docs.test-helpers" class="doc-page-nav-link-next">Test helpers &gt;</LinkTo>
</div>
