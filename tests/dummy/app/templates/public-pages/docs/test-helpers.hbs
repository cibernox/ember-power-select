<h1 class="doc-page-title">Test helpers</h1>

<br>
<h2>Acceptance Tests</h2>

<p>
  Ember Power Select bundles some handy test helpers (<code>selectChoose</code>, <code>selectSearch</code>, <code>removeMultipleOption</code> and <code>clearSelected</code>)
  that make it nicer to interact with the component in acceptance tests.
</p>

<p>
  To use those helpers in acceptance tests that use <code>moduleForAcceptance</code>, you need to register them in the <code>/tests/helpers/start-app.js</code>
  file.
</p>

<p>
  For that import the registration function and invoke it immedialty.
</p>

{{code-snippet name="test-helpers-1-js.js"}}

<p>
  However if you are using the new testing API described in
  <a href="https://github.com/emberjs/rfcs/pull/232">RFC 232</a>, available in ember-cli-qunit >= 4.2 and ember-cli-mocha >= 0.15.0, then you just can explicitly import those
  helpers where needed (even in integration tests!)
</p>

{{code-snippet name="test-helpers-1-js.js"}}

<h3><code>selectChoose(cssPath, optionTextOrOptionSelector, index?)</code></h3>

<p>
  This async helper allows you to select an option of a select by it's text, without worrying about
  if the select is single or multiple or if it is opened or closed.
</p>

{{code-snippet name="test-helpers-2-js.js"}}

It also allows to pass a complec CSS selector where using the text of the option is not
convenient:

{{code-snippet name="test-helpers-3-js.js"}}

<h3><code>selectSearch(cssPath, searchText)</code></h3>

<p>
  Use this helper to perform a search on a  single/multiple select. You probably will use it in
  conjunction when the search perform some asynchronous operation
</p>

{{code-snippet name="test-helpers-4-js.js"}}

<h3><code>removeMultipleOption(cssPath, optionText)</code></h3>

<p>
  Use this helper to remove an option from a multiple select.
</p>

{{code-snippet name="test-helpers-5-js.js"}}

<h3><code>clearSelected(cssPath, optionText)</code></h3>

<p>
  Use this helper to remove an option from a single select when allowClear is set to true.
</p>

{{code-snippet name="test-helpers-6-js.js"}}

<p>
<strong>Note:</strong> Remember to whitelist <code>selectChoose</code>, <code>selectSearch</code>, <code>removeMultipleOption</code> and <code>clearSelected</code> in the list of allowed
  globals in your <code>tests/.jshintrc</code> manifest.
</p>

<br>
<h2>Integration Tests</h2>

<p>
  Test helpers must be imported at the top of your integration test.  The basic functionality of these helpers are unlikely to change, but may experience minor revisions in the future.
</p>
<p><code>import { typeInSearch, clickTrigger } from 'ember-power-select/test-support/helpers'</code></p>
<p>
  Also note that you could extract the code for these test helpers into your own helpers file was well.
</p>
<p><code>import { typeInSearch, clickTrigger } from 'my-app/tests/helpers/test-helpers'</code></p>

<h3><code>clickTrigger(scope, options = {})</code></h3>

<p>
  This helper opens the dropdown based on the class name (scope) defined on the power select.  Scope is optional if integration test renders only one power select.
</p>

{{code-snippet name="test-helpers-7-js.js"}}

<h3><code>typeInSearch(text)</code></h3>

<p>
  This helper is used in conjunction with opening a power select dropdown as long as search is not disabled.
</p>

{{code-snippet name="test-helpers-8-js.js"}}

<h3><code>selectChoose(text)</code></h3>

<p>
  Much like the acceptance one, this integration tests takes care of the entire process of opening
  a select and choosing one of its values witout you having to worry about the details.
</p>

{{code-snippet name="test-helpers-9-js.js"}}

<div class="doc-page-nav">
  {{#link-to 'public-pages.docs.custom-search-action' class="doc-page-nav-link-prev"}}&lt; Custom search action{{/link-to}}
  {{#link-to 'public-pages.docs.troubleshooting' class="doc-page-nav-link-next"}}Troubleshooting &gt;{{/link-to}}
</div>
