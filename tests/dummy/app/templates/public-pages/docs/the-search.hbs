<h1 class="doc-page-title">The search</h1>

<h3>The default behavior</h3>

<p>
  The default search box is by itself surprisingly smart. As you type it will filter the results
  that contain the given string ignoring diacritic differences and capitalization. That means that
  the string <code>maria</code> will match against <code>María</code>, <code>oren</code> against
  <code>Søren</code> and so on.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select
      options=names
      selected=selected
      onchange=(action (mut selected))
      as |name|
    }}
      \{{name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      names: [ "María", "Søren Larsen", "João", "Saša Jurić", "Íñigo" ]
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=diacritics
      selected=selectedDiacritic
      onchange=(action (mut selectedDiacritic))
      as |name|
    }}
      {{name}}
    {{/power-select}}
  </div>
{{/code-sample}}

<p>
  Also (only in single selects) this component supports searching and highlighting even when
  there is no searchbox or the component is focused but closed. It just works out of the box.
</p>

<p>Try focusing the next component and typing, while it's opened and also while it's closed.</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet template {{if (eq component.activeTab 'template') 'active'}}">
    &lt;input type="text" placeholder="Focus me and press TAB to focus the select"&gt;
    \{{#power-select
      options=diacritics
      selected=fellow
      searchEnabled=false
      onchange=(action (mut fellow))
      as |name|}}
      \{{name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet javascript {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      names: [ "María", "Søren Larsen", "João", "Saša Jurić", "Íñigo" ]
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    <input type="text" placeholder="Focus me and press TAB to focus the select" style="line-height: 2; width: 100%">
    <br>
    <br>
    {{#power-select
      options=diacritics
      selected=fellow
      searchEnabled=false
      onchange=(action (mut fellow))
      as |name|}}
      {{name}}
    {{/power-select}}
  </div>
{{/code-sample}}


<h3>Customize the search field</h3>

<p>
  The default search works great when your options are just strings but when your options are
  objects you need to tell the component what field it should match against using the <code>searchField</code> option.
</p>


{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select
      options=countries
      searchField="name"
      selected=selected
      onchange=(action (mut selected))
      as |country|
    }}
      \{{country.name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      countries: [
        { name: 'United States' },
        { name: 'Spain', },
        { name: 'Portugal' },
        { name: 'Russia' },
        { name: 'Latvia' },
        { name: 'Brazil' },
        { name: 'United Kingdom' },
      ]
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=countries
      searchField="name"
      selected=selected
      onchange=(action (mut selected))
      as |country|
    }}
      {{country.name}}
    {{/power-select}}
  </div>
{{/code-sample}}

<p>
  This field is also used when the user types over a select without searchbox that has
  the focus.
</p>

<h3>Pass a custom matcher</h3>

<p>
  Sometimes the default matcher is not enough for you, for example if you need to match against several
  fields or you need to perform fuzzy matching. If that is the case just pass your own matcher
  function. It will receive the option and the search term and you can do whatever you feel like
  inside as long as it returns <code>-1</code> if it doesn't match and a positive number if it does.
  Returning a boolean works too, but might be removed in the near future.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-
      select options=people
      matcher=myMatcher
      selected=selected
      onchange=(action (mut selected))
      as |person|
    }}
      \{{person.name}} {{person.surname}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      people: [
        { name: 'María',  surname: 'Murray' },
        { name: 'Søren',  surname: 'Williams' },
        { name: 'João',   surname: 'Jin' },
        { name: 'Miguel', surname: 'Camba' },
        { name: 'Marta',  surname: 'Stinson' },
        { name: 'Lisa',   surname: 'Simpson' },
      ],

      myMatcher(person, term) {
        return return (person.name + ' ' + person.surname).indexOf(term);
      }
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=people
      matcher=myMatcher
      selected=selectedPerson
      onchange=(action (mut selectedPerson))
      as |person|
    }}
      {{person.name}} {{person.surname}}
    {{/power-select}}
  </div>
{{/code-sample}}

<p>
  This field is also used when the user types over a select without searchbox that has
  the focus.
</p>

<h3>Using the search term inside the block</h3>

<p>
  Is very common to need the search term from withing the block used to render each one of the options,
  typically for apply a highlight some substring of the option's text. For that, the block receives
  the last searched text as the second argument.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select
      options=names
      selected=selected
      onchange=(action (mut selected))
      as |name term|
    }}
      \{{highlight-text name term}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      names: ['Stefan', 'Miguel', 'Tomster', 'Pluto', 'Robert', 'Alex', 'Lauren', 'Geoffrey', 'Ricardo', 'Jamie'],
    });

    // helpers/highlight-substr.js
    export default Ember.Helper.helper(function([text, termToHighlight]) {
      return Ember.String.htmlSafe(text.replace(new RegExp(termToHighlight, 'i'), '<b>$&</b>')); // Warning. This is not XSS safe!
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=names
      selected=selectedPersonName
      onchange=(action (mut selectedPersonName))
      as |name term|
    }}
      {{highlight-substr name term}}
    {{/power-select}}
  </div>
{{/code-sample}}

<p>
  There is a few thigs to be aware of this search term:
</p>

<ul>
  <li>
    Even if the default search is smart enough to transform diacritics, the term will unmodified, and
    therefore you need to handle terms as "João" or "María" yourself.
  </li>
  <li>
    The yielded term is always in synch with the results being displayed. That means that if your search
    is asynchronous and you search "abc", the search term will still be an empty string until the async
    search finishes. Then both the options and the search text update at once.
  </li>
</ul>

<h3>Search box placeholder</h3>

<p>Pass <code>searchPlaceholder="Type your name"</code> to show a placeholder in the search box</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select
      options=names
      searchPlaceholder="Type to filter..."
      selected=person
      onchange=(action (mut person))
      as |name|
    }}
      \{{name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      names: [ "María", "Søren Larsen", "João", "Saša Jurić", "Íñigo" ]
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=diacritics
      searchPlaceholder="Type to filter..."
      selected=person
      onchange=(action (mut person))
      as |name|
    }}
      {{name}}
    {{/power-select}}
  </div>
{{/code-sample}}

<h3>Disable the search box</h3>

<p>
  Last but not least you can disable and hide the search box from the list by passing <code>searchEnabled=false</code> to the component.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-
      select options=names
      searchEnabled=false
      selected=user
      onchange=(action (mut user))
      as |name|
    }}
      \{{name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      names: ['Stefan', 'Miguel', 'Tomster', 'Pluto', 'Robert', 'Alex', 'Lauren', 'Geoffrey', 'Ricardo', 'Jamie'],
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select
      options=names
      searchEnabled=false
      selected=user
      onchange=(action (mut user))
      as |name|
    }}
      {{name}}
    {{/power-select}}
  </div>
{{/code-sample}}

<div class="doc-page-nav">
  {{#link-to 'public-pages.docs.the-list' class="doc-page-nav-link-prev"}}&lt; The list{{/link-to}}
  {{#link-to 'public-pages.docs.styles' class="doc-page-nav-link-next"}}Styles &gt;{{/link-to}}
</div>
