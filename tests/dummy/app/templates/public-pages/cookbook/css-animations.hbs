<h1 class="doc-page-title">CSS animations</h1>

<p>
  <strong>Disclaimer:</strong> <em>Support for animations is only in 0.9.3-beta, and is somewhat experimental.
  The final API or classes might vary, and maybe liquid-fire support is added at some point. Take this
  chapter with a grain of salt.</em>
</p>

<p>
  Want to add some fancy effects to your selects when they open and close?
  Ember Power Select has you covered!
</p>

<p>
  When opening and closing the selects EPS adds some utility classes to the <code>.ember-power-select-dropdown</code>
  element that you can target to perform your CSS vodoo.
</p>
<p>The lifecycle of those clases is:</p>
<ul>
  <li>
    After the <code>.ember-power-select-dropdown</code> has been added to the DOM, it receives a
    <code>.ember-basic-dropdown--transitioning-in</code> class.
  </li>
  <li>
    Once all opening animations or transitions have finished, <code>.ember-basic-dropdown--transitioning-in</code> is
    replaced by <code>.ember-basic-dropdown--transitioned-in</code>.
  </li>
  <li>
    When closed, EPS replaces its content with a close and adds a <code>.ember-basic-dropdown--transitioning-out</code> to it.
  </li>
  <li>
    Once all closing animations or transitions have finished, the "ghost" clone is finally removed.
  </li>
  <li>
    If you don't have animations nor transitions, most of this work is skipped.
  </li>
</ul>

<p>
  So, what do you have to do to enable this? Nothing, just add some animation with CSS.
</p>

<p>Lets add some slide and fade in animation to a select using the bootstrap theme.</p>

{{#code-sample tabs=tabs as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select dropdownClass="slide-fade"
      options=opts
      selected=country
      onchange=(action (mut country))
      searchField="name" as |country|}}
      \{{name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'styles') 'active'}}">
    @keyframes drop-fade-below {
      0%   {
        opacity: 0;
        transform: translateY(-20px);
      }
      100% {
        opacity: 1;
        transform: translateY(3px);
      }
    }
    @keyframes drop-fade-above {
      0%   {
        opacity: 0;
        transform: translateY(20px);
      }
      100% {
        opacity: 1;
        transform: translateY(-3px);
      }
    }

    .slide-fade {

      // When opening below the trigger
      &.ember-basic-dropdown--below.ember-basic-dropdown--transitioning-in {
        animation: drop-fade-below .15s;
      }
      &.ember-basic-dropdown--below.ember-basic-dropdown--transitioning-out {
        animation: drop-fade-below .15s reverse;
      }

      // When opening above the trigger
      &.ember-basic-dropdown--above.ember-basic-dropdown--transitioning-in {
        animation: drop-fade-above .15s;
      }
      &.ember-basic-dropdown--above.ember-basic-dropdown--transitioning-out {
        animation: drop-fade-above .15s reverse;
      }
    }
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select triggerClass="bootstrap-theme-trigger" dropdownClass="slide-fade bootstrap-theme-dropdown" searchField="name" options=options selected=country onchange=(action (mut country)) as |country|}}
      <img src="{{country.flagUrl}}" class="icon-flag"> <strong>{{country.name}}</strong>
    {{/power-select}}
  </div>
{{/code-sample}}

<p>
  Now that you can add animations, the first rule of animations is use them with caution, and if you
  decide that it worth adding them, keep them short. Almost any animation over a third of a second
  is probably too long.
</p>

<p>
  Now lets dive in something more serious. Debounding searches.
</p>

<div class="doc-page-nav">
  {{#link-to 'public-pages.cookbook.bootstrap-theme' class="doc-page-nav-link-prev"}}&lt; Bootstrap theme{{/link-to}}
  {{#link-to 'public-pages.cookbook.debounce-searches' class="doc-page-nav-link-next"}}Debounce searches &gt;{{/link-to}}
</div>