<section class="legacy-demo">
  <input type="text" value="sample input">
  <h2 id="title">Welcome to the demo of ember-power-select (provisional name)</h2>

  {{#power-select options=(readonly moarNumbers) renderInPlace=true selected=(readonly simpleSelected) onchange=(action (mut simpleSelected)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Select of strings with value tracking</h4>
  {{#power-select options=(readonly simpleOptions) selected=(readonly simpleSelected) onchange=(action (mut simpleSelected)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Select of strings with value tracking</h4>
  {{#power-select searchEnabled=false options=(readonly simpleOptions) selected=(readonly simpleSelected) onchange=(action (mut simpleSelected)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Multiple with search</h4>
  {{#power-select-multiple options=(readonly simpleOptions) selected=(readonly someNumbers) onchange=(action (mut someNumbers)) as |option|}}
    {{option}}
  {{/power-select-multiple}}

  <h4>Multiple without search</h4>
  {{#power-select-multiple searchEnabled=false options=(readonly simpleOptions) selected=(readonly someNumbers) onchange=(action (mut someNumbers)) as |option|}}
    {{option}}
  {{/power-select-multiple}}


  {{#power-select-multiple options=complexOptions selected=choosenCountry onchange=(action (mut choosenCountry)) searchField='name' as |country|}}
    {{country.name}}
  {{/power-select-multiple}}

  <p><strong>Trying to reproduce bug with store.findAll('user')</strong></p>

  {{#power-select options=model selected=selectedUser onchange=(action (mut selectedUser)) as |user|}}
    {{user.name}}
  {{/power-select}}

  <h4>Select of strings without value tracking. You can filter right away.</h4>
  <p>simpleSelected is: {{simpleSelected}}</p>

  {{#power-select options=(readonly simpleOptions) selected=(readonly simpleSelected)
    onchange=(action (mut simpleSelected))
    onfocus=(action "didFocus") as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Select of strings with value tracking</h4>
  {{#power-select options=(readonly moarNumbers) selected=(readonly simpleSelected) onchange=(action (mut simpleSelected)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Diacritics search</h4>
  {{#power-select options=(readonly names) selected=diacriticName onchange=(action (mut diacriticName)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>If the default filter matches doesn't work, you can pass your own. This check that results end with the given string. Try searching for "teen"</h4>
  {{#power-select options=(readonly simpleOptions) matcher=endsWithMatcher selected=simpleOpt onchange=(action (mut simpleOpt)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>If the content of your selector cannot be initialized, you can pass an action to find the results your way. e.g. `search=(action "findStuff")`</h4>
  {{#power-select search=(action "search") selected=abracadabra onchange=(action (mut abracadabra)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>... and if that action needs to perform something async, just return a promise</h4>
  {{#power-select search=(action "asyncSearch") selected=foo onchange=(action (mut foo)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Select with placeholder</h4>
  {{#power-select options=(readonly simpleOptions) placeholder="Please select a number" selected=bar onchange=(action (mut bar)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Select clearable</h4>
  {{#power-select options=(readonly complexOptions) searchField="name" allowClear=true selected=name2 onchange=(action (mut name2)) as |option|}}
    {{option.code}}: {{option.name}}
  {{/power-select}}

  <h4>Select multiple with async search</h4>
  {{#power-select-multiple options=(readonly simpleOptions) selected=emptyMultipleSelection onchange=(action (mut multipleSelection)) search=(action 'asyncSearch') as |option|}}
    {{option}}
  {{/power-select-multiple}}

  <h4>Select multiple</h4>
  {{#power-select-multiple options=(readonly simpleOptions) selected=multipleSelection onchange=(action (mut multipleSelection)) as |option|}}
    {{option}}
  {{/power-select-multiple}}

  <p>Selected numbers: {{#each multipleSelection as |number|}}{{number}}, {{/each}}</p>

  <h4>Select multiple with placeholder</h4>
  {{#power-select-multiple options=simpleOptions selected=multipleFoo placeholder="foo bar hey!" onchange=(action (mut multipleFoo)) as |option|}}
    {{option}}
  {{/power-select-multiple}}

  <h4>Select multiple </h4>
  {{#power-select-multiple options=(readonly complexOptions) searchField="name" selected=baz onchange=(action (mut baz)) as |option|}}
    <i class="icon-flag {{option.code}}"></i> {{option.name}}
  {{/power-select-multiple}}
  <p>Selected numbers: {{#each multipleSelection as |number|}}{{number}}, {{/each}}</p>

  <h4>Custom block. When your options are not strings, just customize the html of each option with a block</h4>
  {{#power-select options=(readonly complexOptions) searchField="name" selected=(readonly complexSelected) onchange=(action (mut complexSelection)) as |option|}}
    <i class="icon-flag {{option.code}}"></i>
    {{option.name}}
    <i>Population: {{option.population}}</i>
  {{/power-select}}

  <h4>You can even use a different markup for the selected option and the ones in the list.</h4>
  {{#power-select options=(readonly complexOptions) searchField="name" selected=(readonly complexSelected) triggerComponent="selected-country" onchange=(action (mut complexSelected)) as |option|}}
    <div class="country-detailed-info">
      <div class="country-flag {{option.code}}">
      </div>
      <div class="country-data-text">
        <strong>{{option.name}}</strong>
        <br>
        <small>Population in 2014: <i>{{option.population}}</i></small>
      </div>
    </div>
  {{/power-select}}

  <h4>Select disabled</h4>
  {{#power-select options=(readonly complexOptions) searchField="name" disabled=true selected=complexSelected onchange=(action (mut complexSelected)) as |option|}}
    {{option.code}}: {{option.name}}
  {{/power-select}}

  <h4>Multiple Select disabled</h4>
  {{#power-select-multiple disabled=true options=(readonly complexOptions) searchField="name" selected=baz onchange=(action (mut baz)) as |option|}}
    <i class="icon-flag {{option.code}}"></i> {{option.name}}
  {{/power-select-multiple}}

  <h4>Select with disabled options</h4>
  {{#power-select options=(readonly complexOptionsWithDisabled) searchField="name" selected=complexSelected onchange=(action (mut complexSelected)) as |option|}}
    {{option.code}}: {{option.name}}
  {{/power-select}}

  <h4>Select that receives a promise as options</h4>
  {{#power-select options=(readonly promiseOptions) selected=optionOfPromise onchange=(action (mut optionOfPromise)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>You can customize the message shown while promise is not resolved with `loadingMessage="This promise takes 5 seconds to resolve"`</h4>
  {{#power-select options=(readonly promiseOptions) loadingMessage="This promise takes 5 seconds to resolve" selected=foobar onchange=(action (mut foobar)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>You can customize the text being shown when there is no matches passing `noResultsMessage="404 bro". Type "asdf"`</h4>
  {{#power-select options=(readonly simpleOptions) noResultsMessage="404 bro" selected=qux onchange=(action (mut qux)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Or you can pass any html in the `\{{else}}` block just like each</h4>
  {{#power-select options=(readonly simpleOptions) noResultsMessage="404 bro" selected=bar2 onchange=(action (mut bar2)) as |option|}}
    {{option}}
  {{else}}
    <img height="130" style="display: inline-block;" src="http://cliparts.co/cliparts/bpi/qdj/bpiqdjdc9.png">
    NO
    <br>
    <a href="#">Contact us to complain about this</a>
  {{/power-select}}

  <h4>Select with groups</h4>
  {{#power-select options=(readonly groupedOptions) selected=optionOfGroup onchange=(action (mut optionOfGroup)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Options are appended to the body, unless you pass `renderInPlace=true`</h4>
  {{#power-select options=(readonly simpleOptions) renderInPlace=true selected=simpleSelected2 onchange=(action (mut simpleSelected2)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>The search box can be disabled passing `searchEnabled=false`</h4>
  {{#power-select options=(readonly simpleOptions) searchEnabled=false selected=simpleSelected3 onchange=(action (mut simpleSelected3)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>The search box can be disabled passing `searchEnabled=false` on multiple selects too</h4>
  {{#power-select-multiple searchEnabled=false options=complexOptions selected=choosenCountry onchange=(action (mut choosenCountry)) searchField='name' as |country|}}
    {{country.name}}
  {{/power-select-multiple}}

  <h4>Right to left styles</h4>
  {{#power-select options=(readonly complexOptions) dir="rtl" selected=(readonly complexSelected) allowClear=true onchange=(action (mut complexSelected)) as |option|}}
    {{option.code}}: {{option.name}}
  {{/power-select}}
  <br>
  {{#power-select options=(readonly groupedOptions) dir="rtl" selected=prefilledSelection onchange=(action (mut prefilledSelection)) allowClear=true as |option|}}
    {{option}}
  {{/power-select}}

  <br>
  <div style="align-items: center; display: flex; flex-direction: row">
    <span>Search By:</span>
    {{#power-select onchange=(action (mut searchKey)) options=searchTypes selected=searchKey as |type|}}
      {{type.label}}
    {{/power-select}}
  </div>

  <h4>Match trigger width can be disabled</h4>
  <div style="width: 150px;">
    {{#power-select options=(readonly simpleOptions) selected=simpleSelected4 onchange=(action (mut simpleSelected4)) matchTriggerWidth=false as |opt|}}
      {{opt}}
    {{/power-select}}
  </div>

  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
</section>