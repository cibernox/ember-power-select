<h1 class="doc-page-title">How to use it</h1>

<p>
  The basic usage of the component is very simple. The only mandatory argument you have to
  pass to it is <code>options</code> which has to be a <em>collection</em> of any kind, including
  the result of ember-data operations like <code>.find</code> or <code>.query</code>, and the
  component will yield each individual item in the collection to the block.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{#ember-power-select options=names as |name|}}
      \{{name}}
    \{{/ember-power-select}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      names: ['Stefan', 'Miguel', 'Tomster', 'Pluto']
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#ember-power-select options=names as |name|}}
      {{name}}
    {{/ember-power-select}}
  </div>
{{/code-sample}}

<p>
  However, for these kind of scenarios where you just want to print the item or some of its properties,
  it should be more simple to use the component's blockless form. If your <code>options</code>
  argument is an array of objects, you can pass an <code>optionLabelPath</code> argument to render
  the property in that path as the label for all the options.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet {{if (eq component.activeTab 'template') 'active'}}">
    \{{ember-power-select options=countries optionLabelPath="name"}}
  </pre>
  <pre class="code-sample-snippet {{if (eq component.activeTab 'javascript') 'active'}}">
    const countries = [
      { name: 'United States',  flagUrl: '/flags/us.svg' },
      { name: 'Spain',          flagUrl: '/flags/es.svg' },
      { name: 'Portugal',       flagUrl: '/flags/pt.svg' },
      { name: 'Russia',         flagUrl: '/flags/ru.svg' },
      { name: 'Latvia',         flagUrl: '/flags/lv.svg' },
      { name: 'Brazil',         flagUrl: '/flags/br.svg' },
      { name: 'United Kingdom', flagUrl: '/flags/gb.svg' },
    ];

    export default Ember.Controller.extend({
      countries: countries,
      destination: countries[2]
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{ember-power-select options=countries optionLabelPath="name"}}
  </div>
{{/code-sample}}

<p>
  In the block version of the component, the block becomes the content of each option of the select
  and also the content of the trigger by default. Blocks are a powerful Ember primitive and you can
  use them to build selects with complex HTML inside very naturally.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet template {{if (eq component.activeTab 'template') 'active'}}">
    \{{#ember-power-select options=countries selected=destination as |country|}}
      &lt;img src="\{{country.flagUrl}}" class="icon-flag"&gt; &lt;strong&gt;\{{country.name}}&lt;/strong&gt;
    \{{/ember-power-select}}
  </pre>
  <pre class="code-sample-snippet javascript {{if (eq component.activeTab 'javascript') 'active'}}">
    const countries = [
      { name: 'United States',  flagUrl: '/flags/us.svg' },
      { name: 'Spain',          flagUrl: '/flags/es.svg' },
      { name: 'Portugal',       flagUrl: '/flags/pt.svg' },
      { name: 'Russia',         flagUrl: '/flags/ru.svg' },
      { name: 'Latvia',         flagUrl: '/flags/lv.svg' },
      { name: 'Brazil',         flagUrl: '/flags/br.svg' },
      { name: 'United Kingdom', flagUrl: '/flags/gb.svg' },
    ];

    export default Ember.Controller.extend({
      countries: countries,
      destination: countries[2]
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#ember-power-select options=countries selected=destination as |country|}}
      <img src="{{country.flagUrl}}" class="icon-flag"> <strong>{{country.name}}</strong>
    {{/ember-power-select}}
  </div>
{{/code-sample}}

<p>
  Also you've seen the usage of the <code>selected</code> option. Unsurprisingly it tells the
  component the <strong>initial</strong> selection. But it's important to note a a few things
  about it:
</p>

<ul>
  <li>
    The component compares the selected option with the options in the collection by equalty, to
    have in mind that when working with POJOs that <code>{ foo: 'bar' } === { foo: 'bar' }</code> is false.
  </li>
  <li>
    Updates in the selected element will update the selected value in the component as expected.
  </li>
  <li>
    <code>selected</code> (and all other options options actually) is read only. This means that selecting a
    different element in the component won't propagate this change up to the context.
  </li>
</ul>

<p>
  This is the very basic usage of this component, but so far is pretty useless. Since there is no
  double bindings nothing happens when you select something on it.
</p>

<p>
  That's what actions are for.
</p>

<div class="doc-page-nav">
  {{#link-to 'docs.installation' class="doc-page-nav-link-prev"}}&lt; Installation{{/link-to}}
  {{#link-to 'docs.action-handling' class="doc-page-nav-link-next"}}Action handling &gt;{{/link-to}}
</div>
