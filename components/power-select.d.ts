import Component from '@glimmer/component';
import { MatcherFn } from '../utils/group-utils';
import type { Dropdown, DropdownActions } from 'ember-basic-dropdown/components/basic-dropdown';
interface SelectActions extends DropdownActions {
    search: (term: string) => void;
    highlight: (option: any) => void;
    select: (selected: any, e?: Event) => void;
    choose: (selected: any, e?: Event) => void;
    scrollTo: (option: any) => void;
}
export interface Select extends Dropdown {
    selected: any;
    highlighted: any;
    options: any[];
    results: any[];
    resultsCount: number;
    loading: boolean;
    isActive: boolean;
    searchText: string;
    lastSearchedText: string;
    actions: SelectActions;
}
interface PromiseProxy<T> extends Promise<T> {
    content: any;
}
export interface PowerSelectArgs {
    highlightOnHover?: boolean;
    placeholderComponent?: string;
    searchMessage?: string;
    searchMessageComponent?: string;
    noMatchesMessage?: string;
    noMatchesMessageComponent?: string;
    matchTriggerWidth?: boolean;
    options: any[] | PromiseProxy<any[]>;
    selected: any | PromiseProxy<any>;
    closeOnSelect?: boolean;
    defaultHighlighted?: any;
    searchField?: string;
    searchEnabled?: boolean;
    tabindex?: number | string;
    triggerComponent?: string;
    beforeOptionsComponent?: string;
    optionsComponent?: string;
    groupComponent?: string;
    matcher?: MatcherFn;
    initiallyOpened?: boolean;
    typeAheadOptionMatcher?: MatcherFn;
    buildSelection?: (selected: any, select: Select) => any;
    onChange: (selection: any, select: Select, event?: Event) => void;
    search?: (term: string, select: Select) => any[] | PromiseProxy<any[]>;
    onOpen?: (select: Select, e: Event) => boolean | undefined;
    onClose?: (select: Select, e: Event) => boolean | undefined;
    onInput?: (term: string, select: Select, e: Event) => string | false | void;
    onKeydown?: (select: Select, e: KeyboardEvent) => boolean | undefined;
    onFocus?: (select: Select, event: FocusEvent) => void;
    onBlur?: (select: Select, event: FocusEvent) => void;
    scrollTo?: (option: any, select: Select) => void;
    registerAPI?: (select: Select) => void;
}
export default class PowerSelect extends Component<PowerSelectArgs> {
    _publicAPIActions: {
        search: (term: string) => void;
        highlight: (opt: any) => void;
        select: (selected: any, e?: Event) => void;
        choose: (selected: any, e?: Event) => void;
        scrollTo: (option: any) => void;
    };
    private _resolvedOptions?;
    private _resolvedSelected?;
    private _repeatingChar;
    private _expirableSearchText;
    private _searchResult?;
    isActive: boolean;
    loading: boolean;
    searchText: string;
    lastSearchedText: string;
    highlighted?: any;
    storedAPI: Select;
    private _lastOptionsPromise?;
    private _lastSelectedPromise?;
    private _lastSearchPromise?;
    private _filterResultsCache;
    constructor(owner: unknown, args: PowerSelectArgs);
    willDestroy(): void;
    get highlightOnHover(): boolean;
    get highlightedIndex(): string;
    get searchMessage(): string;
    get noMatchesMessage(): string;
    get matchTriggerWidth(): boolean;
    get mustShowSearchMessage(): boolean;
    get mustShowNoMessages(): boolean;
    get results(): any[];
    get options(): any[];
    get resultsCount(): number;
    get selected(): any;
    handleOpen(_select: Select, e: Event): boolean | void;
    handleClose(_select: Select, e: Event): boolean | void;
    handleInput(e: InputEvent): void;
    handleKeydown(e: KeyboardEvent): boolean | void;
    handleTriggerKeydown(e: KeyboardEvent): boolean | void;
    handleFocus(event: FocusEvent): void;
    handleBlur(event: FocusEvent): void;
    _search(term: string): void;
    _updateOptions(): void;
    _updateHighlighted(): void;
    _updateSelected(): void;
    _selectedObserverCallback(): void;
    _highlight(opt: any): void;
    _select(selected: any, e?: Event): void;
    _choose(selected: any, e?: Event): void;
    _scrollTo(option: any): void;
    _registerAPI(_: Element, [publicAPI]: [Select]): void;
    _performSearch(_: any, [term]: [string]): void;
    _defaultBuildSelection(option: any): any;
    _routeKeydown(select: Select, e: KeyboardEvent): boolean | void;
    _handleKeyTab(select: Select, e: KeyboardEvent): void;
    _handleKeyESC(select: Select, e: KeyboardEvent): void;
    _handleKeyEnter(select: Select, e: KeyboardEvent): boolean | void;
    _handleKeySpace(select: Select, e: KeyboardEvent): void;
    _handleKeyUpDown(select: Select, e: KeyboardEvent): void;
    _resetHighlighted(): void;
    _filter(options: any[], term: string, skipDisabled?: boolean): any[];
    _updateIsActive(value: boolean): void;
    findWithOffset(options: any[], term: string, offset: number, skipDisabled?: boolean): any;
    triggerTypingTask(this: PowerSelect, e: KeyboardEvent): Generator<import("ember-concurrency").Yieldable<void>, void, unknown>;
}
export {};
